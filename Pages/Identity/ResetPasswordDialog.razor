@using BlazorAdminTemplate.Data
@using BlazorAdminTemplate.Data.Enums
@using System.Linq
@using System.Text
@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar
@inject UserManager<ApplicationUser> UserMgr

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Reset Password
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="Password" Label="New Password" />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="Save">Reset</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public ApplicationUser User { get; set; } = new ApplicationUser();

    [DataType(DataType.Password)]
    [Display(Name = "Password")]
    [Required]
    private string Password = String.Empty;

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Save()
    {
        var result = await ResetPassword();

        if (result.Succeeded)
        {
            Snackbar.Add("Saved changes!", Severity.Success);
            MudDialog.Close(DialogResult.Ok(User.Id));
        }
        else
            Snackbar.Add(ErrorDisplayHelper.GetErrorsFromIdentityResult(result), Severity.Error);
    }

    private async Task<IdentityResult> ResetPassword()
    {
        var resultValidatePw = await UserMgr.PasswordValidators.FirstOrDefault()?.ValidateAsync(UserMgr, User, Password);
        if (!resultValidatePw.Succeeded) return resultValidatePw;

        var resultRemovePw = await UserMgr.RemovePasswordAsync(User);
        if (!resultRemovePw.Succeeded) return resultRemovePw;

        var resultAddPw = await UserMgr.AddPasswordAsync(User, Password);
        return resultAddPw;
    }
}
